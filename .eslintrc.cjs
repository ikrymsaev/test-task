module.exports = {
  env: {
    browser: true,
    es6: true,
  },
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  parserOptions: {
    ecmaVersion: 2021, // Allows for the parsing of modern ECMAScript features
    sourceType: 'module', // Allows for the use of imports
    ecmaFeatures: {
      jsx: true, // Allows for the parsing of JSX
      arrowFunctions: true,
    },
  },
  settings: {
    react: {
      version: 'detect',
    },
    'import/resolver': {
      node: {
        extensions: ['.ts', '.tsx'],
        // eslint-disable-next-line max-len
        paths: ['./src'],
      },
    },
  },
  extends: [
    'plugin:prettier/recommended',
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
  ],
  rules: {
    'react/react-in-jsx-scope': 'off',
    'no-debugger': 'off',
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
      },
    ],
    'import/prefer-default-export': 'off',
    'react/sort-comp': [
      'error',
      {
        order: [
          'defaultProps',
          'static-variables',
          'static-methods',
          'getDerivedStateFromProps',
          'state',
          'instance-variables',
          'constructor',
          'lifecycle',
          'getters',
          'setters',
          'instance-methods',
          'everything-else',
          '/^on.+$/',
          '/^handle.+$/',
          '/^render.+$/',
          'render',
        ],
        groups: {
          lifecycle: [
            'displayName',
            'propTypes',
            'contextTypes',
            'childContextTypes',
            'mixins',
            'statics',
            'getDefaultProps',
            'getInitialState',
            'getChildContext',
            'componentWillMount',
            'UNSAFE_componentWillMount',
            'componentDidMount',
            'componentWillReceiveProps',
            'UNSAFE_componentWillReceiveProps',
            'shouldComponentUpdate',
            'componentWillUpdate',
            'UNSAFE_componentWillUpdate',
            'getSnapshotBeforeUpdate',
            'componentDidUpdate',
            'componentDidCatch',
            'componentWillUnmount',
          ],
        },
      },
    ],
    'max-classes-per-file': ['error', 3],
    'max-len': [
        'error',
        {
            code: 120,
            ignorePattern: '^import .*',
        },
    ],
    'max-lines': ['error', 1000],
    'new-parens': 'error',
    'no-cond-assign': 'error',
    'no-console': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty': 'off',
    'no-extra-bind': 'error',
    'no-irregular-whitespace': 'error',
    'no-multiple-empty-lines': [
        'error',
        {
            max: 1,
        },
    ],
    'no-redeclare': 'error',
    'no-sparse-arrays': 'error',
    'no-template-curly-in-string': 'error',
    'no-throw-literal': 'error',
    'no-trailing-spaces': [
        'error',
        {
            ignoreComments: true,
        },
    ],
    'no-unused-labels': 'error',
    'no-var': 'error',
    'one-var': ['error', 'never'],
    'padding-line-between-statements': [
        'error',
        {
            blankLine: 'always',
            prev: '*',
            next: 'return',
        },
    ],
    'prefer-const': [
        'error',
        {
            destructuring: 'all',
        },
    ],
    'prefer-object-spread': 'error',
    'prefer-template': 'error',
    'quote-props': ['error', 'as-needed'],
    'react/jsx-boolean-value': ['error', 'never'],
    'react/jsx-curly-spacing': [
        'error',
        {
            when: 'never',
        },
    ],
    'react/jsx-equals-spacing': ['error', 'never'],
    'react/jsx-key': 'error',
    'react/jsx-no-bind': ['error', { allowArrowFunctions: true }],
    'react/jsx-tag-spacing': [
        'error',
        {
            afterOpening: 'allow',
            closingSlash: 'allow',
        },
    ],
    'react/self-closing-comp': 'error',
    'spaced-comment': [
        'error',
        'always',
        {
            markers: ['/'],
        },
    ],
    'use-isnan': 'error',
    'no-unused-vars': 'off',
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': ['error'],
    'react-hooks/rules-of-hooks': 'error',
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': ['error', { default: 'array' }],
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-empty-interface': 'error',
    '@typescript-eslint/no-this-alias': 'error',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/semi': ['error', 'always'],
    '@typescript-eslint/type-annotation-spacing': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    'arrow-body-style': 'error',
    'brace-style': ['error', '1tbs'],
    'capitalized-comments': ['error', 'always'],
    complexity: ['error', { max: 20 }],
    'constructor-super': 'error',
    curly: 'error',
    'default-case': 'error',
    'id-match': 'error',
  },
};